// Mocks generated by Mockito 5.3.2 from annotations
// in todo_dafault/test/presentation/view_model/task_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_dafault/common/failure.dart' as _i6;
import 'package:todo_dafault/domain/entities/task_response.dart' as _i11;
import 'package:todo_dafault/domain/repositories/repository.dart' as _i2;
import 'package:todo_dafault/domain/usecases/add_task.dart' as _i4;
import 'package:todo_dafault/domain/usecases/delete_task.dart' as _i8;
import 'package:todo_dafault/domain/usecases/get_all_task.dart' as _i10;
import 'package:todo_dafault/domain/usecases/get_done_task.dart' as _i15;
import 'package:todo_dafault/domain/usecases/get_overdue_task.dart' as _i14;
import 'package:todo_dafault/domain/usecases/get_today_task.dart' as _i12;
import 'package:todo_dafault/domain/usecases/get_todo_task.dart' as _i13;
import 'package:todo_dafault/domain/usecases/mark_as_done_task.dart' as _i9;
import 'package:todo_dafault/domain/usecases/update_task.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepository_0 extends _i1.SmartFake implements _i2.Repository {
  _FakeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTask extends _i1.Mock implements _i4.AddTask {
  MockAddTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, dynamic>> execute(
    String? token,
    String? tittle,
    String? description,
    String? time,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            token,
            tittle,
            description,
            time,
          ],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, dynamic>>.value(
            _FakeEither_1<_i6.Failure, dynamic>(
          this,
          Invocation.method(
            #execute,
            [
              token,
              tittle,
              description,
              time,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, dynamic>>);
}

/// A class which mocks [UpdateTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTask extends _i1.Mock implements _i7.UpdateTask {
  MockUpdateTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, dynamic>> execute(
    String? token,
    String? id,
    String? tittle,
    String? description,
    String? time,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            token,
            id,
            tittle,
            description,
            time,
          ],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, dynamic>>.value(
            _FakeEither_1<_i6.Failure, dynamic>(
          this,
          Invocation.method(
            #execute,
            [
              token,
              id,
              tittle,
              description,
              time,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, dynamic>>);
}

/// A class which mocks [DeleteTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTask extends _i1.Mock implements _i8.DeleteTask {
  MockDeleteTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, dynamic>> execute(
    String? token,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            token,
            id,
          ],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, dynamic>>.value(
            _FakeEither_1<_i6.Failure, dynamic>(
          this,
          Invocation.method(
            #execute,
            [
              token,
              id,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, dynamic>>);
}

/// A class which mocks [MarkAsDoneTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkAsDoneTask extends _i1.Mock implements _i9.MarkAsDoneTask {
  MockMarkAsDoneTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, dynamic>> execute(
    String? token,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            token,
            id,
          ],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, dynamic>>.value(
            _FakeEither_1<_i6.Failure, dynamic>(
          this,
          Invocation.method(
            #execute,
            [
              token,
              id,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, dynamic>>);
}

/// A class which mocks [GetAllTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTask extends _i1.Mock implements _i10.GetAllTask {
  MockGetAllTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>> execute(
          String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [token],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>.value(
                _FakeEither_1<_i6.Failure, _i11.TaskResponse>(
          this,
          Invocation.method(
            #execute,
            [token],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>);
}

/// A class which mocks [GetTodayTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodayTask extends _i1.Mock implements _i12.GetTodayTask {
  MockGetTodayTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>> execute(
          String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [token],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>.value(
                _FakeEither_1<_i6.Failure, _i11.TaskResponse>(
          this,
          Invocation.method(
            #execute,
            [token],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>);
}

/// A class which mocks [GetTodoTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodoTask extends _i1.Mock implements _i13.GetTodoTask {
  MockGetTodoTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>> execute(
          String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [token],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>.value(
                _FakeEither_1<_i6.Failure, _i11.TaskResponse>(
          this,
          Invocation.method(
            #execute,
            [token],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>);
}

/// A class which mocks [GetOverdueTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOverdueTask extends _i1.Mock implements _i14.GetOverdueTask {
  MockGetOverdueTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>> execute(
          String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [token],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>.value(
                _FakeEither_1<_i6.Failure, _i11.TaskResponse>(
          this,
          Invocation.method(
            #execute,
            [token],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>);
}

/// A class which mocks [GetDoneTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDoneTask extends _i1.Mock implements _i15.GetDoneTask {
  MockGetDoneTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>> execute(
          String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [token],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>.value(
                _FakeEither_1<_i6.Failure, _i11.TaskResponse>(
          this,
          Invocation.method(
            #execute,
            [token],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i11.TaskResponse>>);
}
